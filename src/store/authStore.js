import { create } from "zustand";
import api from "../api"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º API
import qs from "qs"; // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è form-urlencoded

const useAuthStore = create((set) => ({
    user: JSON.parse(localStorage.getItem("user")) || null,
    token: localStorage.getItem("token") || null,

    login: async (email, password) => {
        try {
            console.log("üì§ –õ–æ–≥–∏–Ω –≤ API: /token", { email, password });

            const data = qs.stringify({
                grant_type: "password",
                username: email,
                password: password,
                scope: "",
                client_id: "",
                client_secret: "",
            });

            const response = await api.post("/token", data, {
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                },
            });

            console.log("‚úÖ –û—Ç–≤–µ—Ç API:", response.data);

            const { access_token } = response.data;
            localStorage.setItem("token", access_token);
            set({ token: access_token });

            return { success: true };
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error.response?.data || error.message);
            return { success: false, error: error.response?.data?.detail || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞" };
        }
    },

    logout: () => {
        console.log("üî¥ –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        localStorage.removeItem("token");
        set({ token: null });
    },

    changePassword: async (oldPassword, newPassword) => {
        try {
            console.log("üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è...");

            const response = await api.put(
                `/change_password?old_password=${oldPassword}&new_password=${newPassword}`
            );

            console.log("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω:", response.data);
            return { success: true, message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!" };
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:", error.response?.data || error.message);
            return { success: false, error: error.response?.data?.detail || "–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è" };
        }
    },
}));

export default useAuthStore;
